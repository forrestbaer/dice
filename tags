!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/Users/forrestbaer/code/dice/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	5.9.0	/e7f2c057/
areDiceFormatted	dice.go	/^func areDiceFormatted(dice string) bool {$/;"	f	package:main	typeref:typename:bool
dice.go	README.md	/^# dice.go$/;"	c
diceRegex	dice.go	/^var diceRegex = regexp.MustCompile(`([0-9]+)d{1}([0-9]+)(([+|-]){1}[0-9]+)*$`)$/;"	v	package:main
getDice	dice.go	/^func getDice(dice string) {$/;"	f	package:main
main	dice.go	/^func main() {$/;"	f	package:main
main	dice.go	/^package main$/;"	p
modRegex	dice.go	/^var modRegex = regexp.MustCompile(`([+-])([0-9]+)`)$/;"	v	package:main
multiple	dice.go	/^var multiple = false$/;"	v	package:main
random	dice.go	/^func random(min, max int) int {$/;"	f	package:main	typeref:typename:int
rollDice	dice.go	/^func rollDice(num int, sides int) int {$/;"	f	package:main	typeref:typename:int
